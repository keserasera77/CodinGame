--実装--
前計算
各点間の距離を計算しとく
各点の次数
袋小路の計算
最初は敵位置が味方と同じタイプで線対称に配置されていることを仮定。

・スーパーペレットの割り当ては最初は各パックからの最短距離を測って割り当てていたのですが、
それだとスーパーペレットの間に挟まれたパックが右往左往してペレットを取りに行くことになり効率が悪いので
最短距離を測って一番短いパックを割り当てたペレットに移動、
再びその時点での各パックからのスーパーペレットの最短距離を測って一番短いパックを割り当てたペレットに移動、
というように割り当てた。（恐らく最適ではないが最初よりはまし）

evalStageは毎ターンstageで初期化

toGoalNextPos : moveAI内で経路上のgame.evalStageを0にする

クラス
Game
Pac
Pacs

evalStageを評価していきその中で最大の場所をgoalに設定する。

--盤面の評価--
方針
・壁は-1
・ペレットが存在しないマスの評価は基本0
・距離により評価を上下するのはあまりよくないかも。

EVAL_DIR_DEPTH = 10; 各方向の探索範囲

加点
ペレットの得点
相手より近い場所。 EVAL_NEAR = 1.1; //敵の位置推定がまだ不正確なので

turn > 400 / visiblePacCount で連結成分の個数を気にする *comp.size()/visiblePelletCount
見えてるペレットは0.1加点
減点
自分のパックの行き先に近い。(Goalへの経路は特に)

--経路の評価--
経路上の盤面の評価の足し合わせ。

--改善点--
敵が近くにいるときにアビリティを使うな。
敵に近づくのは確実に仕留められるときだけ。
相手より近いスーパーペレットは確実に獲得したい。
2マス先で戻ってくるパターン

--アイデア--
やった
2マス先をgoalに設定する。
敵を角に追い込む

まだ
敵を味方に監視させて奇襲。
相手のパックからの最善の経路に横入りする。
視界外ペレットの推測
敵位置推定


--気がかり--


--その他--
・衝突回避は更新されてから1ターン以内の敵が対象

--却下--
SPEED中自分の位置と1つ隣は*0.5
->
次数が3以上の点と,次数が2以下の点をまとめた点を頂点とするグラフを構成
->ターンごとの計算量は落ちるかもしれないがこれでできることは元のグラフでもできるうえに実装が面倒
prePos == pos && mACD < 10で衝突を避ける
->味方との衝突は無理
自分より弱い敵がいるかつ敵がmACD == 0でない。 + 200/turn
->確定キルの場合のみルールベースで対処

--他の方々の意見--
パックの経路探索を２フェーズに分けて味方の経路を邪魔しないようにする。
